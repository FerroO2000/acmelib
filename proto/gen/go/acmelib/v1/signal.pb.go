// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: acmelib/v1/signal.proto

package acmelibv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignalKind int32

const (
	SignalKind_SIGNAL_KIND_UNSPECIFIED SignalKind = 0
	SignalKind_SIGNAL_KIND_STANDARD    SignalKind = 1
	SignalKind_SIGNAL_KIND_ENUM        SignalKind = 2
	SignalKind_SIGNAL_KIND_MULTIPLEXER SignalKind = 3
)

// Enum value maps for SignalKind.
var (
	SignalKind_name = map[int32]string{
		0: "SIGNAL_KIND_UNSPECIFIED",
		1: "SIGNAL_KIND_STANDARD",
		2: "SIGNAL_KIND_ENUM",
		3: "SIGNAL_KIND_MULTIPLEXER",
	}
	SignalKind_value = map[string]int32{
		"SIGNAL_KIND_UNSPECIFIED": 0,
		"SIGNAL_KIND_STANDARD":    1,
		"SIGNAL_KIND_ENUM":        2,
		"SIGNAL_KIND_MULTIPLEXER": 3,
	}
)

func (x SignalKind) Enum() *SignalKind {
	p := new(SignalKind)
	*p = x
	return p
}

func (x SignalKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignalKind) Descriptor() protoreflect.EnumDescriptor {
	return file_acmelib_v1_signal_proto_enumTypes[0].Descriptor()
}

func (SignalKind) Type() protoreflect.EnumType {
	return &file_acmelib_v1_signal_proto_enumTypes[0]
}

func (x SignalKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignalKind.Descriptor instead.
func (SignalKind) EnumDescriptor() ([]byte, []int) {
	return file_acmelib_v1_signal_proto_rawDescGZIP(), []int{0}
}

type SignalSendType int32

const (
	SignalSendType_SIGNAL_SEND_TYPE_UNSPECIFIED               SignalSendType = 0
	SignalSendType_SIGNAL_SEND_TYPE_CYCLIC                    SignalSendType = 1
	SignalSendType_SIGNAL_SEND_TYPE_ON_WRITE                  SignalSendType = 2
	SignalSendType_SIGNAL_SEND_TYPE_ON_WRITE_WITH_REPETITION  SignalSendType = 3
	SignalSendType_SIGNAL_SEND_TYPE_ON_CHANGE                 SignalSendType = 4
	SignalSendType_SIGNAL_SEND_TYPE_ON_CHANGE_WITH_REPETITION SignalSendType = 5
	SignalSendType_SIGNAL_SEND_TYPE_IF_ACTIVE                 SignalSendType = 6
	SignalSendType_SIGNAL_SEND_TYPE_IF_ACTIVE_WITH_REPETITION SignalSendType = 7
)

// Enum value maps for SignalSendType.
var (
	SignalSendType_name = map[int32]string{
		0: "SIGNAL_SEND_TYPE_UNSPECIFIED",
		1: "SIGNAL_SEND_TYPE_CYCLIC",
		2: "SIGNAL_SEND_TYPE_ON_WRITE",
		3: "SIGNAL_SEND_TYPE_ON_WRITE_WITH_REPETITION",
		4: "SIGNAL_SEND_TYPE_ON_CHANGE",
		5: "SIGNAL_SEND_TYPE_ON_CHANGE_WITH_REPETITION",
		6: "SIGNAL_SEND_TYPE_IF_ACTIVE",
		7: "SIGNAL_SEND_TYPE_IF_ACTIVE_WITH_REPETITION",
	}
	SignalSendType_value = map[string]int32{
		"SIGNAL_SEND_TYPE_UNSPECIFIED":               0,
		"SIGNAL_SEND_TYPE_CYCLIC":                    1,
		"SIGNAL_SEND_TYPE_ON_WRITE":                  2,
		"SIGNAL_SEND_TYPE_ON_WRITE_WITH_REPETITION":  3,
		"SIGNAL_SEND_TYPE_ON_CHANGE":                 4,
		"SIGNAL_SEND_TYPE_ON_CHANGE_WITH_REPETITION": 5,
		"SIGNAL_SEND_TYPE_IF_ACTIVE":                 6,
		"SIGNAL_SEND_TYPE_IF_ACTIVE_WITH_REPETITION": 7,
	}
)

func (x SignalSendType) Enum() *SignalSendType {
	p := new(SignalSendType)
	*p = x
	return p
}

func (x SignalSendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignalSendType) Descriptor() protoreflect.EnumDescriptor {
	return file_acmelib_v1_signal_proto_enumTypes[1].Descriptor()
}

func (SignalSendType) Type() protoreflect.EnumType {
	return &file_acmelib_v1_signal_proto_enumTypes[1]
}

func (x SignalSendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignalSendType.Descriptor instead.
func (SignalSendType) EnumDescriptor() ([]byte, []int) {
	return file_acmelib_v1_signal_proto_rawDescGZIP(), []int{1}
}

type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity     *Entity        `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Kind       SignalKind     `protobuf:"varint,2,opt,name=kind,proto3,enum=acmelib.v1.SignalKind" json:"kind,omitempty"`
	SendType   SignalSendType `protobuf:"varint,3,opt,name=send_type,json=sendType,proto3,enum=acmelib.v1.SignalSendType" json:"send_type,omitempty"`
	StartValue float64        `protobuf:"fixed64,4,opt,name=start_value,json=startValue,proto3" json:"start_value,omitempty"`
	// Types that are assignable to Signal:
	//
	//	*Signal_Standard
	//	*Signal_Enum
	//	*Signal_Multiplexer
	Signal isSignal_Signal `protobuf_oneof:"signal"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acmelib_v1_signal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_acmelib_v1_signal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_acmelib_v1_signal_proto_rawDescGZIP(), []int{0}
}

func (x *Signal) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Signal) GetKind() SignalKind {
	if x != nil {
		return x.Kind
	}
	return SignalKind_SIGNAL_KIND_UNSPECIFIED
}

func (x *Signal) GetSendType() SignalSendType {
	if x != nil {
		return x.SendType
	}
	return SignalSendType_SIGNAL_SEND_TYPE_UNSPECIFIED
}

func (x *Signal) GetStartValue() float64 {
	if x != nil {
		return x.StartValue
	}
	return 0
}

func (m *Signal) GetSignal() isSignal_Signal {
	if m != nil {
		return m.Signal
	}
	return nil
}

func (x *Signal) GetStandard() *StandardSignal {
	if x, ok := x.GetSignal().(*Signal_Standard); ok {
		return x.Standard
	}
	return nil
}

func (x *Signal) GetEnum() *EnumSignal {
	if x, ok := x.GetSignal().(*Signal_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *Signal) GetMultiplexer() *MultiplexerSignal {
	if x, ok := x.GetSignal().(*Signal_Multiplexer); ok {
		return x.Multiplexer
	}
	return nil
}

type isSignal_Signal interface {
	isSignal_Signal()
}

type Signal_Standard struct {
	Standard *StandardSignal `protobuf:"bytes,5,opt,name=standard,proto3,oneof"`
}

type Signal_Enum struct {
	Enum *EnumSignal `protobuf:"bytes,6,opt,name=enum,proto3,oneof"`
}

type Signal_Multiplexer struct {
	Multiplexer *MultiplexerSignal `protobuf:"bytes,7,opt,name=multiplexer,proto3,oneof"`
}

func (*Signal_Standard) isSignal_Signal() {}

func (*Signal_Enum) isSignal_Signal() {}

func (*Signal_Multiplexer) isSignal_Signal() {}

type StandardSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StandardSignal_EmbeddedType
	//	*StandardSignal_TypeEntityId
	Type isStandardSignal_Type `protobuf_oneof:"type"`
	// Types that are assignable to Unit:
	//
	//	*StandardSignal_EmbeddedUnit
	//	*StandardSignal_UnitEntityId
	Unit isStandardSignal_Unit `protobuf_oneof:"unit"`
}

func (x *StandardSignal) Reset() {
	*x = StandardSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acmelib_v1_signal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardSignal) ProtoMessage() {}

func (x *StandardSignal) ProtoReflect() protoreflect.Message {
	mi := &file_acmelib_v1_signal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardSignal.ProtoReflect.Descriptor instead.
func (*StandardSignal) Descriptor() ([]byte, []int) {
	return file_acmelib_v1_signal_proto_rawDescGZIP(), []int{1}
}

func (m *StandardSignal) GetType() isStandardSignal_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StandardSignal) GetEmbeddedType() *SignalType {
	if x, ok := x.GetType().(*StandardSignal_EmbeddedType); ok {
		return x.EmbeddedType
	}
	return nil
}

func (x *StandardSignal) GetTypeEntityId() string {
	if x, ok := x.GetType().(*StandardSignal_TypeEntityId); ok {
		return x.TypeEntityId
	}
	return ""
}

func (m *StandardSignal) GetUnit() isStandardSignal_Unit {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (x *StandardSignal) GetEmbeddedUnit() *SignalUnit {
	if x, ok := x.GetUnit().(*StandardSignal_EmbeddedUnit); ok {
		return x.EmbeddedUnit
	}
	return nil
}

func (x *StandardSignal) GetUnitEntityId() string {
	if x, ok := x.GetUnit().(*StandardSignal_UnitEntityId); ok {
		return x.UnitEntityId
	}
	return ""
}

type isStandardSignal_Type interface {
	isStandardSignal_Type()
}

type StandardSignal_EmbeddedType struct {
	EmbeddedType *SignalType `protobuf:"bytes,1,opt,name=embedded_type,json=embeddedType,proto3,oneof"`
}

type StandardSignal_TypeEntityId struct {
	TypeEntityId string `protobuf:"bytes,2,opt,name=type_entity_id,json=typeEntityId,proto3,oneof"`
}

func (*StandardSignal_EmbeddedType) isStandardSignal_Type() {}

func (*StandardSignal_TypeEntityId) isStandardSignal_Type() {}

type isStandardSignal_Unit interface {
	isStandardSignal_Unit()
}

type StandardSignal_EmbeddedUnit struct {
	EmbeddedUnit *SignalUnit `protobuf:"bytes,3,opt,name=embedded_unit,json=embeddedUnit,proto3,oneof"`
}

type StandardSignal_UnitEntityId struct {
	UnitEntityId string `protobuf:"bytes,4,opt,name=unit_entity_id,json=unitEntityId,proto3,oneof"`
}

func (*StandardSignal_EmbeddedUnit) isStandardSignal_Unit() {}

func (*StandardSignal_UnitEntityId) isStandardSignal_Unit() {}

type EnumSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Enum:
	//
	//	*EnumSignal_EmbeddedEnum
	//	*EnumSignal_EnumEntityId
	Enum isEnumSignal_Enum `protobuf_oneof:"enum"`
}

func (x *EnumSignal) Reset() {
	*x = EnumSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acmelib_v1_signal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumSignal) ProtoMessage() {}

func (x *EnumSignal) ProtoReflect() protoreflect.Message {
	mi := &file_acmelib_v1_signal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumSignal.ProtoReflect.Descriptor instead.
func (*EnumSignal) Descriptor() ([]byte, []int) {
	return file_acmelib_v1_signal_proto_rawDescGZIP(), []int{2}
}

func (m *EnumSignal) GetEnum() isEnumSignal_Enum {
	if m != nil {
		return m.Enum
	}
	return nil
}

func (x *EnumSignal) GetEmbeddedEnum() *SignalEnum {
	if x, ok := x.GetEnum().(*EnumSignal_EmbeddedEnum); ok {
		return x.EmbeddedEnum
	}
	return nil
}

func (x *EnumSignal) GetEnumEntityId() string {
	if x, ok := x.GetEnum().(*EnumSignal_EnumEntityId); ok {
		return x.EnumEntityId
	}
	return ""
}

type isEnumSignal_Enum interface {
	isEnumSignal_Enum()
}

type EnumSignal_EmbeddedEnum struct {
	EmbeddedEnum *SignalEnum `protobuf:"bytes,1,opt,name=embedded_enum,json=embeddedEnum,proto3,oneof"`
}

type EnumSignal_EnumEntityId struct {
	EnumEntityId string `protobuf:"bytes,2,opt,name=enum_entity_id,json=enumEntityId,proto3,oneof"`
}

func (*EnumSignal_EmbeddedEnum) isEnumSignal_Enum() {}

func (*EnumSignal_EnumEntityId) isEnumSignal_Enum() {}

type MultiplexerSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signals              []*Signal        `protobuf:"bytes,1,rep,name=signals,proto3" json:"signals,omitempty"`
	FixedSignalEntityIds []string         `protobuf:"bytes,2,rep,name=fixed_signal_entity_ids,json=fixedSignalEntityIds,proto3" json:"fixed_signal_entity_ids,omitempty"`
	GroupCount           uint32           `protobuf:"varint,3,opt,name=group_count,json=groupCount,proto3" json:"group_count,omitempty"`
	GroupSize            uint32           `protobuf:"varint,4,opt,name=group_size,json=groupSize,proto3" json:"group_size,omitempty"`
	Groups               []*SignalPayload `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *MultiplexerSignal) Reset() {
	*x = MultiplexerSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acmelib_v1_signal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiplexerSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiplexerSignal) ProtoMessage() {}

func (x *MultiplexerSignal) ProtoReflect() protoreflect.Message {
	mi := &file_acmelib_v1_signal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiplexerSignal.ProtoReflect.Descriptor instead.
func (*MultiplexerSignal) Descriptor() ([]byte, []int) {
	return file_acmelib_v1_signal_proto_rawDescGZIP(), []int{3}
}

func (x *MultiplexerSignal) GetSignals() []*Signal {
	if x != nil {
		return x.Signals
	}
	return nil
}

func (x *MultiplexerSignal) GetFixedSignalEntityIds() []string {
	if x != nil {
		return x.FixedSignalEntityIds
	}
	return nil
}

func (x *MultiplexerSignal) GetGroupCount() uint32 {
	if x != nil {
		return x.GroupCount
	}
	return 0
}

func (x *MultiplexerSignal) GetGroupSize() uint32 {
	if x != nil {
		return x.GroupSize
	}
	return 0
}

func (x *MultiplexerSignal) GetGroups() []*SignalPayload {
	if x != nil {
		return x.Groups
	}
	return nil
}

var File_acmelib_v1_signal_proto protoreflect.FileDescriptor

var file_acmelib_v1_signal_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x63,
	0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x63, 0x6d, 0x65,
	0x6c, 0x69, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69,
	0x62, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x02, 0x0a, 0x06, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x2a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x09,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x12, 0x2c, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x41,
	0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x65,
	0x72, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0xee, 0x01, 0x0a, 0x0e,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3d,
	0x0a, 0x0d, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x55, 0x6e, 0x69, 0x74, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c,
	0x75, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x7b, 0x0a, 0x0a,
	0x45, 0x6e, 0x75, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0d, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x75,
	0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x2c, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x35, 0x0a,
	0x17, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2a, 0x76, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x58, 0x45, 0x52, 0x10, 0x03, 0x2a,
	0xbd, 0x02, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x2d, 0x0a, 0x29, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12,
	0x2e, 0x0a, 0x2a, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12,
	0x2e, 0x0a, 0x2a, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x42,
	0x7c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x76,
	0x31, 0x42, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x14, 0x61, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x63, 0x6d,
	0x65, 0x6c, 0x69, 0x62, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x41,
	0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x41, 0x63, 0x6d, 0x65,
	0x6c, 0x69, 0x62, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x16, 0x41, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0b, 0x41, 0x63, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_acmelib_v1_signal_proto_rawDescOnce sync.Once
	file_acmelib_v1_signal_proto_rawDescData = file_acmelib_v1_signal_proto_rawDesc
)

func file_acmelib_v1_signal_proto_rawDescGZIP() []byte {
	file_acmelib_v1_signal_proto_rawDescOnce.Do(func() {
		file_acmelib_v1_signal_proto_rawDescData = protoimpl.X.CompressGZIP(file_acmelib_v1_signal_proto_rawDescData)
	})
	return file_acmelib_v1_signal_proto_rawDescData
}

var file_acmelib_v1_signal_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_acmelib_v1_signal_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_acmelib_v1_signal_proto_goTypes = []interface{}{
	(SignalKind)(0),           // 0: acmelib.v1.SignalKind
	(SignalSendType)(0),       // 1: acmelib.v1.SignalSendType
	(*Signal)(nil),            // 2: acmelib.v1.Signal
	(*StandardSignal)(nil),    // 3: acmelib.v1.StandardSignal
	(*EnumSignal)(nil),        // 4: acmelib.v1.EnumSignal
	(*MultiplexerSignal)(nil), // 5: acmelib.v1.MultiplexerSignal
	(*Entity)(nil),            // 6: acmelib.v1.Entity
	(*SignalType)(nil),        // 7: acmelib.v1.SignalType
	(*SignalUnit)(nil),        // 8: acmelib.v1.SignalUnit
	(*SignalEnum)(nil),        // 9: acmelib.v1.SignalEnum
	(*SignalPayload)(nil),     // 10: acmelib.v1.SignalPayload
}
var file_acmelib_v1_signal_proto_depIdxs = []int32{
	6,  // 0: acmelib.v1.Signal.entity:type_name -> acmelib.v1.Entity
	0,  // 1: acmelib.v1.Signal.kind:type_name -> acmelib.v1.SignalKind
	1,  // 2: acmelib.v1.Signal.send_type:type_name -> acmelib.v1.SignalSendType
	3,  // 3: acmelib.v1.Signal.standard:type_name -> acmelib.v1.StandardSignal
	4,  // 4: acmelib.v1.Signal.enum:type_name -> acmelib.v1.EnumSignal
	5,  // 5: acmelib.v1.Signal.multiplexer:type_name -> acmelib.v1.MultiplexerSignal
	7,  // 6: acmelib.v1.StandardSignal.embedded_type:type_name -> acmelib.v1.SignalType
	8,  // 7: acmelib.v1.StandardSignal.embedded_unit:type_name -> acmelib.v1.SignalUnit
	9,  // 8: acmelib.v1.EnumSignal.embedded_enum:type_name -> acmelib.v1.SignalEnum
	2,  // 9: acmelib.v1.MultiplexerSignal.signals:type_name -> acmelib.v1.Signal
	10, // 10: acmelib.v1.MultiplexerSignal.groups:type_name -> acmelib.v1.SignalPayload
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_acmelib_v1_signal_proto_init() }
func file_acmelib_v1_signal_proto_init() {
	if File_acmelib_v1_signal_proto != nil {
		return
	}
	file_acmelib_v1_entity_proto_init()
	file_acmelib_v1_signal_type_proto_init()
	file_acmelib_v1_signal_unit_proto_init()
	file_acmelib_v1_signal_enum_proto_init()
	file_acmelib_v1_signal_payload_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_acmelib_v1_signal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acmelib_v1_signal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acmelib_v1_signal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acmelib_v1_signal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiplexerSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_acmelib_v1_signal_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Signal_Standard)(nil),
		(*Signal_Enum)(nil),
		(*Signal_Multiplexer)(nil),
	}
	file_acmelib_v1_signal_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*StandardSignal_EmbeddedType)(nil),
		(*StandardSignal_TypeEntityId)(nil),
		(*StandardSignal_EmbeddedUnit)(nil),
		(*StandardSignal_UnitEntityId)(nil),
	}
	file_acmelib_v1_signal_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*EnumSignal_EmbeddedEnum)(nil),
		(*EnumSignal_EnumEntityId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_acmelib_v1_signal_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_acmelib_v1_signal_proto_goTypes,
		DependencyIndexes: file_acmelib_v1_signal_proto_depIdxs,
		EnumInfos:         file_acmelib_v1_signal_proto_enumTypes,
		MessageInfos:      file_acmelib_v1_signal_proto_msgTypes,
	}.Build()
	File_acmelib_v1_signal_proto = out.File
	file_acmelib_v1_signal_proto_rawDesc = nil
	file_acmelib_v1_signal_proto_goTypes = nil
	file_acmelib_v1_signal_proto_depIdxs = nil
}
